@page "/PedidosPage"

<PageTitle>Pedidos</PageTitle>

<div class="card mb-4 shadow-sm mx-auto col-md-6">
    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #05163D; color: honeydew;">
        <h2>Cadastro de Pedidos</h2>
    </div>
    <div class="card-body text-center">
        <p class="text-muted">
            <b>Aqui você pode gerenciar os pedidos realizados, acompanhar status e visualizar detalhes.</b>
        </p>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #0A2464; color: honeydew;">
        <h2>Detalhes dos Pedidos</h2>
        <button class="btn btn-info" @onclick="AddOrder">Incluir Novo Pedido</button>
    </div>
    <div class="card-body">
        @if (Orders.Count > 0)
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Cliente</th>
                        <th>Data</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Orders)
                    {
                        <tr>
                            <td>@order.Id</td>
                            <td>@order.CustomerName</td>
                            <td>@order.Date.ToString("dd/MM/yyyy")</td>
                            <td>R$ @order.Total.ToString("F2")</td>
                            <td>@order.Status</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => ViewOrder(order.Id)">Visualizar</button>
                                <button class="btn btn-sm btn-warning" @onclick="() => EditOrder(order.Id)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteOrder(order.Id)">Excluir</button>
                                <button class="btn btn-sm btn-success" @onclick="() => PrintOrder(order.Id)">Imprimir</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-muted text-center">Nenhum pedido cadastrado.</p>
        }
    </div>
</div>

@code {
    private List<Order> Orders = new()
    {
        new Order { Id = 1, CustomerName = "João Silva", Date = DateTime.Now.AddDays(-2), Total = 150.75m, Status = "Concluído" },
        new Order { Id = 2, CustomerName = "Maria Oliveira", Date = DateTime.Now.AddDays(-1), Total = 300.50m, Status = "Pendente de impressão" },
        new Order { Id = 3, CustomerName = "Pedro Santos", Date = DateTime.Now, Total = 75.00m, Status = "Cancelado" }
    };

    private void AddOrder()
    {
        // Simular ação de adição
        Console.WriteLine("Adicionando novo pedido");
    }

    private void EditOrder(int orderId)
    {
        // Simular ação de edição
        Console.WriteLine($"Editando pedido com ID: {orderId}");
    }

    private void DeleteOrder(int orderId)
    {
        // Simular ação de exclusão
        Console.WriteLine($"Excluindo pedido com ID: {orderId}");
        Orders.Remove(Orders.First(o => o.Id == orderId));
    }

    private void ViewOrder(int orderId)
    {
        // Simular ação de visualização
        Console.WriteLine($"Visualizando detalhes do pedido com ID: {orderId}");
    }

    private void PrintOrder(int orderId)
    {
        Console.WriteLine($"Imprimindo pedido com ID: {orderId}");
        // Aqui você pode implementar a lógica para gerar um PDF ou enviar para a impressora.
    }

    private class Order
    {
        public int Id { get; set; }
        public string CustomerName { get; set; }
        public DateTime Date { get; set; }
        public decimal Total { get; set; }
        public string Status { get; set; }
    }
}